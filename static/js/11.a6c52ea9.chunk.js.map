{"version":3,"sources":["Components/LineChart.js","Components/TableIndicesCategories.js","Components/DropDown.js","Views/ChartsView.js"],"names":["LineChart","chartHeight","data","pollutants","stationName","footNote","window","innerWidth","dataChart","labels","datasets","label","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","content","error","loading","Loader","items","map","timestamp","split","pollutant","ix","value","readings","MapNamePollutants","className","options","responsive","scales","xAxes","display","scaleLabel","labelString","ticks","major","fontStyle","fontColor","yAxes","height","prop","key","TableIndicesCategories","props","DropDown","selected","listItems","setValue","useState","dropDownOpen","setDropDownOpen","DropDownItem","item","onClick","icon","faChevronDown","ChartsView","locationUser","setStationName","useEffect","ClosestStation","name","Helmet"],"mappings":"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","file":"static/js/11.a6c52ea9.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Line } from \"react-chartjs-2\";\nimport Loader from \"./Loader\";\nimport { MapNamePollutants } from \"../Functions/Utils\";\n\nfunction LineChart({ data, pollutants, stationName, footNote }) {\n  const { innerWidth: width } = window;\n\n  let chartHeight;\n  if (width > 500) {\n    chartHeight = 150;\n  } else {\n    chartHeight = 250;\n  }\n\n  let dataChart = {\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n    datasets: [\n      {\n        label: \"PSI\",\n        fill: false,\n        lineTension: 0.1,\n        borderColor: \"rgb(116, 111, 117)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgb(116, 111, 117)\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(116, 111, 117)\",\n        pointHoverBorderColor: \"#ddd\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: [65, 59, 80, 81, 56, 55, 40],\n      },\n      {\n        label: \"PSI\",\n        fill: false,\n        lineTension: 0.1,\n        borderColor: \"rgb(30,145,214)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgb(30,145,214)\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(30,145,214)\",\n        pointHoverBorderColor: \"#ddd\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: [65, 59, 80, 81, 56, 55, 40],\n      },\n      {\n        label: \"PSI\",\n        fill: false,\n        lineTension: 0.1,\n        borderColor: \"#6a197d\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"#6a197d\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"#6a197d\",\n        pointHoverBorderColor: \"#ddd\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: [65, 59, 80, 81, 56, 55, 40],\n      },\n      // {\n      //   label: \"\",\n      //   fill: true,\n      //   lineTension: 0.1,\n      //   backgroundColor: \"rgba(17,167,7,0.18)\",\n      //   borderCapStyle: \"butt\",\n      //   borderDash: [],\n      //   borderDashOffset: 0.0,\n      //   borderJoinStyle: \"miter\",\n      //   pointBorderWidth: 0,\n      //   pointHoverRadius: 0,\n      //   pointHoverBorderWidth: 0,\n      //   pointRadius: 0,\n      //   pointHitRadius: 0,\n      //   data: [50, 50],\n      // },\n    ],\n  };\n\n  let content = null;\n\n  if (data.error) {\n    content = <div>Could not fetch API</div>;\n  }\n\n  if (data.loading) {\n    content = <Loader />;\n  }\n\n  if (data.data) {\n    dataChart.labels = data.data.items.map(\n      (label) => label.timestamp.split(\"T\")[1].split(\":\")[0]\n    );\n\n    pollutants.map((pollutant, ix) => {\n      dataChart.datasets[ix].data = data.data.items.map(\n        (value) => value.readings[pollutant][stationName]\n      );\n      dataChart.datasets[ix].label = MapNamePollutants(pollutant, false);\n    });\n\n    // dataChart.datasets[3].data = data.data.items.map((value) => 50);\n\n    content = (\n      <div className=\"container mx-auto my-3 p-4 shadow-lg border rounded\">\n        <Line\n          data={dataChart}\n          options={{\n            responsive: true,\n            scales: {\n              xAxes: [\n                {\n                  display: true,\n                  scaleLabel: {\n                    display: true,\n                    labelString: \"Hour\",\n                  },\n                  ticks: {\n                    major: {\n                      fontStyle: \"bold\",\n                      fontColor: \"#FF0000\",\n                    },\n                  },\n                },\n              ],\n              yAxes: [\n                {\n                  display: true,\n                  scaleLabel: {\n                    display: true,\n                    labelString: \"Sub-index value\",\n                  },\n                },\n              ],\n            },\n          }}\n          height={chartHeight}\n        />\n        {footNote.map((prop) => (\n          <p key={prop} className=\"text-xs text-center text-gray-800\">\n            {prop}\n          </p>\n        ))}\n      </div>\n    );\n  }\n\n  return <div>{content}</div>;\n}\n\nexport default LineChart;\n","import React from \"react\";\n\nfunction TableIndicesCategories(props) {\n  return (\n    <div className=\"flex mx-auto justify-center py-3\">\n      <table className=\"table-auto text-center\">\n        <thead>\n          <tr>\n            <th className=\"px-4 py-2\">Sub-Index value</th>\n            <th className=\"px-4 py-2\">Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr className=\"text-green-600 font-medium\">\n            <td className=\"border px-4 py-2\">0 - 50</td>\n            <td className=\"border px-4 py-2\">Good</td>\n          </tr>\n          <tr className=\"text-blue-600 font-medium\">\n            <td className=\"border px-4 py-2\">51 - 100</td>\n            <td className=\"border px-4 py-2\">Moderate</td>\n          </tr>\n          <tr className=\"text-yellow-600 font-medium\">\n            <td className=\"border px-4 py-2\">101 - 200</td>\n            <td className=\"border px-4 py-2\">Unhealthy</td>\n          </tr>\n          <tr className=\"text-orange-600 font-medium\">\n            <td className=\"border px-4 py-2\">201 - 300</td>\n            <td className=\"border px-4 py-2\">Very Unhealthy</td>\n          </tr>\n          <tr className=\"text-red-600 font-medium\">\n            <td className=\"border px-4 py-2\">Above 300</td>\n            <td className=\"border px-4 py-2\">Hazardous</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default TableIndicesCategories;\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction DropDown({ selected, listItems, setValue }) {\n  const [dropDownOpen, setDropDownOpen] = useState(false);\n\n  function DropDownItem({ item }) {\n    return (\n      <span\n        className=\"block py-1 px-8 hover:bg-gray-200 capitalize\"\n        onClick={() => {\n          setDropDownOpen(!dropDownOpen);\n          setValue(item);\n        }}\n      >\n        {item}\n      </span>\n    );\n  }\n\n  return (\n    <div className=\"relative\">\n      <button\n        className=\"bg-gray-100 hover:bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center\"\n        onClick={() => setDropDownOpen(!dropDownOpen)}\n      >\n        <span className=\"capitalize mx-2\">{selected}</span>\n        <FontAwesomeIcon icon={faChevronDown} />\n      </button>\n      <div\n        className={\n          \"bg-gray-100 absolute right-0 rounded mt-1 py-1 text-center shadow-md\" +\n          (dropDownOpen ? \"\" : \" hidden\")\n        }\n      >\n        {listItems.map((item) => (\n          <DropDownItem key={item} item={item} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default DropDown;\n","import React, { useEffect, useState } from \"react\";\nimport LineChart from \"../Components/LineChart\";\nimport TableIndicesCategories from \"../Components/TableIndicesCategories\";\nimport { ClosestStation } from \"../Functions/Utils\";\nimport Loader from \"../Components/Loader\";\nimport DropDown from \"../Components/DropDown\";\nimport { Helmet } from \"react-helmet\";\n\nfunction ChartsView({ data, locationUser }) {\n  // todo also add temperature and relative humidity chart\n  const [stationName, setStationName] = useState(false);\n\n  useEffect(() => {\n    if (locationUser.data && data.data) {\n      setStationName(ClosestStation(data.data, locationUser.data).name);\n    }\n  }, [data.data, locationUser.data]);\n\n  let content = \"\";\n\n  if (data.error) {\n    content = <div>Could not fetch API</div>;\n  }\n\n  if (data.loading) {\n    content = <Loader />;\n  }\n\n  if (locationUser.data && data.data && stationName) {\n    content = (\n      <div className=\"container mx-auto\">\n        <Helmet>\n          <title>Historical pollution data</title>\n          <meta\n            name=\"description\"\n            content=\"This page shows you the pollutants concentrations over the last 24 hours.\"\n          />\n        </Helmet>\n        <div className=\"flex justify-center content-center\">\n          <p className=\"py-2 mr-2\">Pollution last 24-h. Station:</p>\n          <DropDown\n            selected={stationName}\n            listItems={[\"north\", \"south\", \"central\", \"east\", \"west\"]}\n            setValue={setStationName}\n          />\n        </div>\n        <LineChart\n          data={data}\n          pollutants={[\"pm10_sub_index\", \"pm25_sub_index\", \"no2_one_hour_max\"]}\n          stationName={stationName}\n          footNote={[\n            \"* computed on 24-hour average Particulate Matter (PM) 10 reading (µg/m3)\",\n            \"** computed on 24-hour average Particulate Matter (PM) 2.5 reading (µg/m3)\",\n          ]}\n        />\n        <LineChart\n          data={data}\n          pollutants={[\"o3_sub_index\", \"co_sub_index\", \"so2_sub_index\"]}\n          stationName={stationName}\n          footNote={[\n            \"* computed based on 8-hour average Ozone reading (µg/m3)\",\n            \"** computed on 8-hour average Carbon Monoxide (CO) reading(mg/m3)\",\n            \"*** computed on 24-hour average Sulphur Dioxide (SO2) reading (µg/m3)\",\n          ]}\n        />\n        <TableIndicesCategories />\n      </div>\n    );\n  }\n\n  return content;\n}\n\nexport default ChartsView;\n"],"sourceRoot":""}