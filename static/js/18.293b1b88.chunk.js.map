{"version":3,"sources":["Components/MapWeather2H.js","Components/MapWeather24H.js","Components/RainViewer.js","Views/ForecastView.js"],"names":["GetIcon","data","stationName","_iconSize","L","icon","iconUrl","ForecastToIcon","TwoHForecastsAtUserLocation","iconSize","MapWeather2H","zoom","window","width","innerWidth","height","innerHeight","Helmet","name","content","Map","center","style","zoomControl","ZoomControl","position","TileLayer","className","attribution","url","map","marker","Marker","key","label_location","latitude","longitude","Popup","regionsMetadata","west","national","east","central","south","north","MapWeather24H","useState","indexForecast","setIndexForecast","ButtonForecast","text","index","onClick","error","loading","Loader","Object","keys","description","period","time","start","split","end","RainViewer","src","frameBorder","title","allowFullScreen","ForecastView","dataFor2H","dataFor24H","buttonSelection","setButtonSelection","subViews","LinkViewSelector","ViewSelector","view","View","selection","console","log","entries","items","length","unshift"],"mappings":"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","file":"static/js/18.293b1b88.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\nimport { Map, TileLayer, Marker, Popup, ZoomControl } from \"react-leaflet\";\r\nimport {\r\n  ForecastToIcon,\r\n  TwoHForecastsAtUserLocation,\r\n} from \"../Functions/Utils\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nfunction GetIcon(data, stationName, _iconSize) {\r\n  return L.icon({\r\n    iconUrl: ForecastToIcon(\r\n      TwoHForecastsAtUserLocation(data.data, stationName)\r\n    ),\r\n    iconSize: [_iconSize], // size of the icon\r\n  });\r\n}\r\n\r\nfunction MapWeather2H({ data }) {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n\r\n  let zoom, iconSize;\r\n  if (width > 500) {\r\n    zoom = 11;\r\n    iconSize = 35;\r\n  } else {\r\n    zoom = 10;\r\n    iconSize = 25;\r\n  }\r\n\r\n  const position = [1.3521, 103.8198];\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>2-hour weather forecasts in Singapore</title>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"This page shows the next two hours weather forecasts for more than 20 locations in Singapore\"\r\n        />\r\n      </Helmet>\r\n      <Map\r\n        center={position}\r\n        zoom={zoom}\r\n        style={{ height: height - 108 - 104, width: \"100%\" }}\r\n        zoomControl={false}\r\n      >\r\n        <ZoomControl position=\"bottomleft\" />\r\n        <TileLayer\r\n          className=\"leaflet-tile-pane\"\r\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {data.data\r\n          ? data.data[\"area_metadata\"].map((marker) => (\r\n              <Marker\r\n                key={marker.name}\r\n                position={[\r\n                  marker.label_location.latitude,\r\n                  marker.label_location.longitude,\r\n                ]}\r\n                icon={GetIcon(data, marker.name, iconSize)}\r\n              >\r\n                <Popup>\r\n                  <div className=\"text-center\">\r\n                    <span className=\"text-lg capitalize\">{marker.name}</span>{\" \"}\r\n                    <br />\r\n                    {TwoHForecastsAtUserLocation(data.data, marker.name)}\r\n                  </div>\r\n                </Popup>\r\n              </Marker>\r\n            ))\r\n          : \"\"}\r\n      </Map>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapWeather2H;\r\n","import React, { useState } from \"react\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\nimport { Map, TileLayer, Marker, Popup, ZoomControl } from \"react-leaflet\";\r\nimport { ForecastToIcon } from \"../Functions/Utils\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Loader from \"./Loader\";\r\n\r\nfunction GetIcon(description, _iconSize) {\r\n  return L.icon({\r\n    iconUrl: ForecastToIcon(description),\r\n    iconSize: [_iconSize], // size of the icon\r\n  });\r\n}\r\n\r\nconst regionsMetadata = {\r\n  west: { latitude: 1.35735, longitude: 103.7 },\r\n  national: { latitude: 0, longitude: 0 },\r\n  east: { latitude: 1.35735, longitude: 103.94 },\r\n  central: { latitude: 1.35735, longitude: 103.82 },\r\n  south: { latitude: 1.29587, longitude: 103.82 },\r\n  north: { latitude: 1.41803, longitude: 103.82 },\r\n};\r\n\r\nfunction MapWeather24H({ data }) {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  const [indexForecast, setIndexForecast] = useState(0);\r\n\r\n  let zoom, iconSize;\r\n  if (width > 500) {\r\n    zoom = 11;\r\n    iconSize = 50;\r\n  } else {\r\n    zoom = 10;\r\n    iconSize = 40;\r\n  }\r\n\r\n  function ButtonForecast({ text, index }) {\r\n    if (text === \"12-18\") {\r\n      text = \"Afternoon\";\r\n    } else if (text === \"18-06\" || text === \"00-06\") {\r\n      text = \"Night\";\r\n    } else if (text === \"18-00\") {\r\n      text = \"Evening\";\r\n    } else if (text === \"06-12\") {\r\n      text = \"Morning\";\r\n    }\r\n\r\n    return (\r\n      <button\r\n        className={\r\n          \"bg-white hover:bg-gray-200 text-gray-500 py-1 px-2\" +\r\n          (indexForecast === index\r\n            ? \" border text-gray-700 font-semibold\"\r\n            : \" border-b hover:text-gray-800 \")\r\n        }\r\n        onClick={() => setIndexForecast(index)}\r\n      >\r\n        {text}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  const position = [1.3521, 103.8198];\r\n\r\n  let content;\r\n  if (data.error) {\r\n    content = (\r\n      <p className=\"p-5\">\r\n        data.gov.sg is under maintenance and we could not download the\r\n        current weather forecasts. Please try again later. Sorry for the inconvenience.\r\n      </p>\r\n    );\r\n  } else if (data.loading) {\r\n    content = <Loader />;\r\n  } else {\r\n    content = (\r\n      <div className=\"relative\">\r\n        <Helmet>\r\n          <title>24-hour weather forecasts</title>\r\n          <meta\r\n            name=\"description\"\r\n            content=\"In this page you can monitor the next 24 hours weather forecasts for five locations across Singapore\"\r\n          />\r\n        </Helmet>\r\n        <Map\r\n          center={position}\r\n          zoom={zoom}\r\n          style={{ height: height - 108 - 104, width: \"100%\" }}\r\n          className=\"z-0\"\r\n          zoomControl={false}\r\n        >\r\n          <ZoomControl position=\"bottomleft\" />\r\n          <TileLayer\r\n            className=\"leaflet-tile-pane\"\r\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          {data.data\r\n            ? Object.keys(data.data[\"items\"][0][\"periods\"][0][\"regions\"]).map(\r\n                (marker) => (\r\n                  <Marker\r\n                    key={marker}\r\n                    position={[\r\n                      regionsMetadata[marker].latitude,\r\n                      regionsMetadata[marker].longitude,\r\n                    ]}\r\n                    icon={GetIcon(\r\n                      data.data[\"items\"][0][\"periods\"][indexForecast][\r\n                        \"regions\"\r\n                      ][marker],\r\n                      iconSize\r\n                    )}\r\n                  >\r\n                    <Popup>\r\n                      <div className=\"text-center\">\r\n                        <span className=\"text-lg capitalize\">{marker}</span>{\" \"}\r\n                        <br />\r\n                        {\r\n                          data.data[\"items\"][0][\"periods\"][indexForecast][\r\n                            \"regions\"\r\n                          ][marker]\r\n                        }\r\n                      </div>\r\n                    </Popup>\r\n                  </Marker>\r\n                )\r\n              )\r\n            : \"\"}\r\n        </Map>\r\n        <div className=\"z-10 absolute top-0 right-0 left-0 mx-auto text-center\">\r\n          <div className=\"inline-flex mt-2 shadow-lg\">\r\n            {data.data\r\n              ? data.data[\"items\"][0][\"periods\"].map((period, index) => (\r\n                  <ButtonForecast\r\n                    key={period.time.start}\r\n                    text={\r\n                      period.time.start.split(\"T\")[1].split(\":\")[0] +\r\n                      \"-\" +\r\n                      period.time.end.split(\"T\")[1].split(\":\")[0]\r\n                    }\r\n                    index={index}\r\n                  />\r\n                ))\r\n              : \"\"}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\nexport default MapWeather24H;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nfunction RainViewer() {\r\n  const { innerHeight: height } = window;\r\n\r\n  return (\r\n    <div className=\"container-flex mx-auto\">\r\n      <Helmet>\r\n        <title>Rain Radar Singapore</title>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"This page shows the rain radar data for the past two hours in Singapore.\r\n          The weather radar data is extremely useful since it allows you to assess where it is currently raining\r\n          and how the rain clouds are moving.\r\n          In addition you can also zoom out and see the weather radar for any location in the world.\"\r\n        />\r\n      </Helmet>\r\n      <iframe\r\n        src=\"https://www.rainviewer.com/map.html?loc=1.3521,103.8198,9&oFa=0&oC=0&oU=0&oCS=1&oF=0&oAP=1&rmt=4&c=1&o=83&lm=1&th=0&sm=1&sn=1\"\r\n        width=\"100%\"\r\n        frameBorder=\"0\"\r\n        title=\"Rain Radar\"\r\n        style={{ height: height - 108 - 104, width: \"100%\" }}\r\n        allowFullScreen\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RainViewer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport MapWeather2H from \"../Components/MapWeather2H\";\r\nimport MapWeather24H from \"../Components/MapWeather24H\";\r\nimport RainViewer from \"../Components/RainViewer\";\r\n\r\nfunction ForecastView({ dataFor2H, dataFor24H }) {\r\n  const [buttonSelection, setButtonSelection] = useState(\"Rain Radar\");\r\n\r\n  let subViews = [\"Rain Radar\"];\r\n\r\n  if (dataFor2H.data) {\r\n    if (Object.entries(dataFor2H.data.items[0]).length !== 0) {\r\n      subViews.unshift(\"2-h Forecast\");\r\n    }\r\n  }\r\n\r\n  if (dataFor24H.data) {\r\n    if (Object.entries(dataFor24H.data.items[0]).length !== 0) {\r\n      subViews.unshift(\"24-h Forecast\");\r\n    }\r\n  }\r\n\r\n  function LinkViewSelector({ text }) {\r\n    return (\r\n      <li className=\"-mb-px mr-1\">\r\n        <span\r\n          className={\r\n            \"bg-white inline-block text-gray-500 py-2 px-4 \" +\r\n            (buttonSelection === text\r\n              ? \" border-l border-t border-r rounded-t text-gray-700 font-semibold\"\r\n              : \" border-b hover:text-gray-800 \")\r\n          }\r\n          onClick={() => setButtonSelection(text)}\r\n        >\r\n          {text}\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  function ViewSelector() {\r\n    return (\r\n      <div className=\"container mx-auto my-2 text-center text-sm\">\r\n        <ul className=\"flex border-b justify-center\">\r\n          {subViews.map((view) => (\r\n            <LinkViewSelector key={view} text={view} />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function View({ selection }) {\r\n    if (selection === \"2-h Forecast\") {\r\n      return <MapWeather2H data={dataFor2H} />;\r\n    } else if (selection === \"24-h Forecast\") {\r\n      console.log(dataFor24H);\r\n      return <MapWeather24H data={dataFor24H} />;\r\n    } else {\r\n      return <RainViewer />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ViewSelector />\r\n      <View selection={buttonSelection} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ForecastView;\r\n"],"sourceRoot":""}