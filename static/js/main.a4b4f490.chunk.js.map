{"version":3,"sources":["Components/Loader.js","Static/Icons/logo192.png","Static/Icons/logo192.webp","Components/NavigationBar.js","Views/CurrentReadingsView.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","module","exports","logo","require","NavigationBar","React","useState","navbarOpen","setNavbarOpen","to","type","srcSet","src","alt","width","onClick","viewBox","xmlns","d","Recommendation","lazy","TopImage","CurrentReadings","CurrentReadingsView","dataPSI","dataTmp","dataRH","dataFor2H","dataFor24H","dataPM25","locationUser","RequestedUseLocation","showRequestLocButton","Helmet","name","content","fallback","WikiClimate","WikiPM25","WikiWeather","AboutView","WikiPSI","MapPollutionView","ForecastView","ChartsView","Footer","App","tzOffset","Date","getTimezoneOffset","isoString","now","toISOString","substr","urlRH","urlTmp","urlWeather2H","urlWeather24H","split","dateString","urlPM25","Query","url","useQuery","fetch","then","res","json","isLoading","error","data","loading","items","readings","length","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","setLocationUser","setShowRequestLocButton","getCoordinates","position","coords","showError","code","PERMISSION_DENIED","alert","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERR","useEffect","navigator","permissions","query","result","state","console","log","options","enableHighAccuracy","timeout","maximumAge","geolocation","getCurrentPosition","basename","exact","path","Boolean","window","location","hostname","match","queryClient","QueryClient","rootElement","document","getElementById","hasChildNodes","hydrate","client","render","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a4b4f490.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div className=\"container mx-auto\">\r\n      <div className=\"flex justify-center\">\r\n        <div className=\"loader\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","module.exports = __webpack_public_path__ + \"static/media/logo192.9a9969a0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo192.ad9688c3.webp\";","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst logo = require(\"../Static/Icons/logo192.png\");\r\n\r\nfunction NavigationBar() {\r\n  const [navbarOpen, setNavbarOpen] = React.useState(false);\r\n\r\n  return (\r\n    <nav className=\"container mx-auto flex items-center justify-between flex-wrap p-6\">\r\n      <Link to=\"/\">\r\n        <div className=\"flex items-center flex-shrink-0\">\r\n          <picture>\r\n            <source\r\n              type=\"image/webp\"\r\n              srcSet={require(\"../Static/Icons/logo192.webp\")}\r\n            />\r\n            <source type=\"image/png\" srcSet={logo} />\r\n            <img src={logo} alt=\"logo Air Quality and Weather SG\" width={50} />\r\n          </picture>\r\n          <span className=\"font-semibold text-xl tracking-tight ml-3 w-40\">\r\n            Air Quality and Weather SG\r\n          </span>\r\n        </div>\r\n      </Link>\r\n      <div className=\"block xl:hidden\">\r\n        <button\r\n          className=\"flex items-center px-3 py-2 border rounded hover:text-gray-700 hover:border-white\"\r\n          type=\"button\"\r\n          onClick={() => setNavbarOpen(!navbarOpen)}\r\n        >\r\n          <svg\r\n            className=\"fill-current h-3 w-3\"\r\n            viewBox=\"0 0 20 20\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <title>Menu</title>\r\n            <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div\r\n        className={\r\n          \"w-full block flex-end xl:flex xl:items-center xl:w-auto\" +\r\n          (navbarOpen ? \"\" : \" hidden\")\r\n        }\r\n        onClick={() => setNavbarOpen(!navbarOpen)}\r\n      >\r\n        <div className=\"text-sm xl:flex-grow\">\r\n          <Link to=\"/\">\r\n            <span className=\"block mt-4 xl:inline-block xl:mt-0 hover:text-gray-600 ml-4\">\r\n              Home\r\n            </span>\r\n          </Link>\r\n          <Link to=\"/air-pollution-singapore-haze\">\r\n            <span className=\"block mt-4 xl:inline-block xl:mt-0 hover:text-gray-600 ml-4\">\r\n              Charts\r\n            </span>\r\n          </Link>\r\n          <Link to=\"/weather-forecast-singapore\">\r\n            <span className=\"block mt-4 xl:inline-block xl:mt-0 over:text-gray-600 ml-4\">\r\n              Forecast\r\n            </span>\r\n          </Link>\r\n          <Link to=\"/map-air-pollution-singapore-haze\">\r\n            <span className=\"block mt-4 xl:inline-block xl:mt-0 over:text-gray-600 ml-4\">\r\n              Air Quality Map\r\n            </span>\r\n          </Link>\r\n          <Link to=\"/about-air-quality-and-weather-sg\">\r\n            <span className=\"block mt-4 xl:inline-block xl:mt-0 over:text-gray-600 ml-4\">\r\n              About\r\n            </span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavigationBar;\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Loader from \"../Components/Loader\";\r\n\r\nconst Recommendation = lazy(() => import(\"../Components/Recommendation\"));\r\nconst TopImage = lazy(() => import(\"../Components/TopImage\"));\r\nconst CurrentReadings = lazy(() => import(\"../Components/CurrentReadings\"));\r\n\r\nfunction CurrentReadingsView({\r\n  dataPSI,\r\n  dataTmp,\r\n  dataRH,\r\n  dataFor2H,\r\n  dataFor24H,\r\n  dataPM25,\r\n  locationUser,\r\n  RequestedUseLocation,\r\n  showRequestLocButton,\r\n}) {\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Air quality and Weather Singapore</title>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"This page allows you to monitor and track in real-time the standard indexes of the major outdoor\r\n      pollutants in Singapore. In addition you can monitor the current temperature and relative humidity in your location as well as the\r\n      weather forecasts for Singapore\"\r\n        />\r\n      </Helmet>\r\n      <Suspense fallback={<Loader />}>\r\n        <div className=\"flex\">\r\n          <TopImage dataPSI={dataPSI} locationUser={locationUser} />\r\n        </div>\r\n      </Suspense>\r\n      <Suspense fallback={<Loader />}>\r\n        <CurrentReadings\r\n          dataPSI={dataPSI}\r\n          dataTmp={dataTmp}\r\n          dataRH={dataRH}\r\n          dataFor2H={dataFor2H}\r\n          dataFor24H={dataFor24H}\r\n          dataPM25={dataPM25}\r\n          locationUser={locationUser}\r\n          RequestedUseLocation={RequestedUseLocation}\r\n          showRequestLocButton={showRequestLocButton}\r\n        />\r\n      </Suspense>\r\n      <Suspense fallback={<Loader />}>\r\n        <Recommendation dataPSI={dataPSI} locationUser={locationUser} />\r\n      </Suspense>\r\n      <div className=\"container mx-auto my-3 p-8 items-center justify-center rounded overflow-hidden border shadow-lg\">\r\n        <div className=\"text-gray-800 mb-2\">\r\n          <div className=\"font-bold text-md mb-2\">Learn more about:</div>\r\n          <div>\r\n            <ul className=\"list-disc list-inside\">\r\n              <li className=\"py-1\">\r\n                <Link to=\"/climate-of-singapore\">The climate of Singapore</Link>\r\n              </li>\r\n              <li className=\"py-1\">\r\n                <Link to=\"/pollutant-standards-index-singapore\">\r\n                  What the Pollutant Standards Index (PSI) measures\r\n                </Link>\r\n              </li>\r\n              <li className=\"py-1\">\r\n                <Link to=\"/pm25\">What is 1-h Particular Matter 2.5 µm</Link>\r\n              </li>\r\n              <li className=\"py-1\">\r\n                <Link to=\"/weather-singapore\">\r\n                  Where we are getting the data from\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CurrentReadingsView;\r\n","import React, { Suspense, lazy, useState, useEffect } from \"react\";\r\nimport NavigationBar from \"./Components/NavigationBar\";\r\nimport CurrentReadingsView from \"./Views/CurrentReadingsView\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Loader from \"./Components/Loader\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nconst WikiClimate = lazy(() => import(\"./Views/WikiClimate\"));\r\nconst WikiPM25 = lazy(() => import(\"./Views/WikiPM25\"));\r\nconst WikiWeather = lazy(() => import(\"./Views/WikiWeather\"));\r\nconst AboutView = lazy(() => import(\"./Views/AboutView\"));\r\nconst WikiPSI = lazy(() => import(\"./Views/WikiPSI\"));\r\nconst MapPollutionView = lazy(() => import(\"./Views/MapPollutionView\"));\r\nconst ForecastView = lazy(() => import(\"./Views/ForecastView\"));\r\nconst ChartsView = lazy(() => import(\"./Views/ChartsView\"));\r\nconst Footer = lazy(() => import(\"./Components/Footer\"));\r\n\r\nfunction App() {\r\n  let tzOffset = new Date().getTimezoneOffset(); //offset in milliseconds\r\n  tzOffset = tzOffset - (480 + tzOffset);\r\n  let isoString = new Date(Date.now() - tzOffset * 60000)\r\n    .toISOString()\r\n    .substr(0, 19);\r\n\r\n  const urlRH =\r\n    \"https://api.data.gov.sg/v1/environment/relative-humidity?date_time=\" +\r\n    isoString;\r\n  const urlTmp =\r\n    \"https://api.data.gov.sg/v1/environment/air-temperature?date_time=\" +\r\n    isoString;\r\n  const urlWeather2H =\r\n    \"https://api.data.gov.sg/v1/environment/2-hour-weather-forecast?date_time=\" +\r\n    isoString;\r\n  const urlWeather24H =\r\n    \"https://api.data.gov.sg/v1/environment/24-hour-weather-forecast?date_time=\" +\r\n    isoString;\r\n\r\n  // if it is midnight I am querying the previous day\r\n  if (isoString.split(\"T\")[1].split(\":\")[0] === \"00\") {\r\n    let tzOffset = new Date().getTimezoneOffset(); //offset in milliseconds\r\n    tzOffset = tzOffset - (360 + tzOffset);\r\n    isoString = new Date(Date.now() - tzOffset * 60000)\r\n      .toISOString()\r\n      .substr(0, 19);\r\n  }\r\n\r\n  const dateString = isoString.split(\"T\")[0];\r\n  const urlPSI =\r\n    \"https://api.data.gov.sg/v1/environment/psi?date=\" + dateString;\r\n  const urlPM25 =\r\n    \"https://api.data.gov.sg/v1/environment/pm25?date=\" + dateString;\r\n\r\n  const Query = (url) => {\r\n    const { isLoading, error, data } = useQuery(url, () =>\r\n      fetch(url).then((res) => res.json())\r\n    );\r\n    return { data: data, loading: isLoading, error: error };\r\n  };\r\n\r\n  const dataPSI = Query(urlPSI);\r\n  const dataFor2H = Query(urlWeather2H);\r\n  const dataTmp = Query(urlTmp);\r\n  const dataRH = Query(urlRH);\r\n  const dataPM25 = Query(urlPM25);\r\n  const dataFor24H = Query(urlWeather24H);\r\n\r\n  if (dataTmp.data) {\r\n    // console.log(dataTmp.data.items[0].readings.length);\r\n    // fixme the code below is not very good\r\n    if (dataTmp.data.items[0].readings.length === 1) {\r\n      dataTmp.error = true;\r\n    }\r\n  }\r\n\r\n  // fixme if there are no data the website crashes\r\n  // if (dataFor24H.data) {\r\n  //   console.log(dataFor24H.data.items.length);\r\n  //   console.log(dataFor24H.data.items);\r\n  //   if (dataFor24H.data.items.length === 1) {\r\n  //     dataFor24H.error = true;\r\n  //   }\r\n  // }\r\n\r\n  const [locationUser, setLocationUser] = useState({\r\n    loading: false,\r\n    data: {\r\n      accuracy: 2678,\r\n      altitude: null,\r\n      altitudeAccuracy: null,\r\n      heading: null,\r\n      latitude: 1.3271039999999998,\r\n      longitude: 103.841792,\r\n      speed: null,\r\n    },\r\n    error: false,\r\n  });\r\n  const [showRequestLocButton, setShowRequestLocButton] = useState(true);\r\n\r\n  // todo for the moment the try and catch below has fixed the issue on Safari but needs to be fixed\r\n  useEffect(() => {\r\n    try {\r\n      navigator.permissions\r\n        .query({ name: \"geolocation\" })\r\n        .then(function (result) {\r\n          if (result.state === \"granted\") {\r\n            RequestedUseLocation();\r\n            setShowRequestLocButton(false);\r\n          } else {\r\n            console.log(\"permission not granted\");\r\n          }\r\n          // Don't do anything if the permission was denied.\r\n        });\r\n    } catch {}\r\n  }, [isoString]);\r\n\r\n  function getCoordinates(position) {\r\n    setLocationUser({\r\n      loading: false,\r\n      data: position.coords,\r\n      error: false,\r\n    });\r\n  }\r\n\r\n  function showError(error) {\r\n    switch (error.code) {\r\n      case error.PERMISSION_DENIED:\r\n        alert(\r\n          \"You denied the request for Geolocation.\\n\" +\r\n            \"Please allow us to access your location if you want to see the data for your current location.\"\r\n        );\r\n        break;\r\n      case error.POSITION_UNAVAILABLE:\r\n        alert(\r\n          \"Location information is unavailable.\\n\" +\r\n            \"We are assuming you are in the center of Singapore\"\r\n        );\r\n        break;\r\n      case error.TIMEOUT:\r\n        alert(\r\n          \"The request to get user location timed out.\\n\" +\r\n            \"We are assuming you are in the center of Singapore\"\r\n        );\r\n        break;\r\n      case error.UNKNOWN_ERR:\r\n        alert(\r\n          \"An unknown error occurred.\\n\" +\r\n            \"We are assuming you are in the center of Singapore\"\r\n        );\r\n        break;\r\n      default:\r\n        alert(\r\n          \"An unknown error occurred.\\n\" +\r\n            \"We are assuming you are in the center of Singapore\"\r\n        );\r\n    }\r\n  }\r\n\r\n  const options = {\r\n    enableHighAccuracy: true,\r\n    timeout: 3000,\r\n    maximumAge: 0,\r\n  };\r\n\r\n  function RequestedUseLocation() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        getCoordinates,\r\n        showError,\r\n        options\r\n      );\r\n    } else {\r\n      alert(\"Geolocation is not supported by this browser\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Router basename=\"/air-quality-weather-sg\">\r\n      <div className=\"relative pb-10 min-h-screen\">\r\n        <NavigationBar />\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <CurrentReadingsView\r\n              dataPSI={dataPSI}\r\n              dataTmp={dataTmp}\r\n              dataRH={dataRH}\r\n              dataFor2H={dataFor2H}\r\n              dataFor24H={dataFor24H}\r\n              dataPM25={dataPM25}\r\n              locationUser={locationUser}\r\n              RequestedUseLocation={RequestedUseLocation}\r\n              showRequestLocButton={showRequestLocButton}\r\n            />\r\n          </Route>\r\n          <Suspense fallback={<Loader />}>\r\n            <Route path=\"/air-pollution-singapore-haze\">\r\n              <ChartsView data={dataPSI} locationUser={locationUser} />\r\n            </Route>\r\n            <Route path=\"/weather-forecast-singapore\">\r\n              <ForecastView dataFor2H={dataFor2H} dataFor24H={dataFor24H} />\r\n            </Route>\r\n            <Route path=\"/map-air-pollution-singapore-haze\">\r\n              <MapPollutionView data={dataPSI} />\r\n            </Route>\r\n            <Route path=\"/about-air-quality-and-weather-sg\">\r\n              <AboutView />\r\n            </Route>\r\n            <Route path=\"/pollutant-standards-index-singapore\">\r\n              <WikiPSI />\r\n            </Route>\r\n            <Route path=\"/pm25\">\r\n              <WikiPM25 />\r\n            </Route>\r\n            <Route path=\"/weather-singapore\">\r\n              <WikiWeather />\r\n            </Route>\r\n            <Route path=\"/climate-of-singapore\">\r\n              <WikiClimate />\r\n            </Route>\r\n          </Suspense>\r\n        </Switch>\r\n        <Suspense fallback={<Loader />}>\r\n          <div>\r\n            <Footer />\r\n          </div>\r\n        </Suspense>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              // console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./tailwind.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { hydrate, render } from \"react-dom\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nconst queryClient = new QueryClient();\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nif (rootElement.hasChildNodes()) {\r\n  hydrate(\r\n    <QueryClientProvider client={queryClient}>\r\n      <App />\r\n    </QueryClientProvider>,\r\n    rootElement\r\n  );\r\n} else {\r\n  render(\r\n    <QueryClientProvider client={queryClient}>\r\n      <App />\r\n    </QueryClientProvider>,\r\n    rootElement\r\n  );\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}