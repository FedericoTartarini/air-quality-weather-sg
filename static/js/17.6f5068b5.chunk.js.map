{"version":3,"sources":["Components/MajorPollutants.js","Components/CurrentValue.js","Components/CurrentForecast.js","Components/CurrentReadings.js"],"names":["MajorPollutants","dataPSI","locationUser","pollutant","content","error","loading","className","Loader","data","stationName","ClosestStation","name","latestReading","GetLatestReading","icon","PollutantClass","size","color","to","GetHelpURL","MapNamePollutants","faQuestionCircle","description","Fragment","CurrentValue","ReadingAtUserLocation","CurrentForecast","dataFor2H","dataFor24H","station","text","stringForecast","iconSource","Object","entries","items","length","periods","regions","ForecastToIcon","TwoHForecastsAtUserLocation","src","alt","CurrentReadings","dataTmp","dataRH","dataPM25","RequestedUseLocation","showRequestLocButton","useState","setStation","useEffect","value","undefined","onClick","faCrosshairs"],"mappings":"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","file":"static/js/17.6f5068b5.chunk.js","sourcesContent":["import React from \"react\";\nimport Loader from \"./Loader\";\nimport {\n  ClosestStation,\n  GetLatestReading,\n  MapNamePollutants,\n  PollutantClass,\n  GetHelpURL,\n} from \"../Functions/Utils\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { Link } from \"react-router-dom\";\n\nfunction MajorPollutants({ dataPSI, locationUser, pollutant }) {\n  let content = null;\n\n  if (locationUser.error || dataPSI.error) {\n    content = <div>Could not fetch API</div>;\n  }\n\n  if (locationUser.loading || dataPSI.loading) {\n    content = (\n      <div className=\"container mx-auto\">\n        <Loader />\n      </div>\n    );\n  }\n\n  if (locationUser.data && dataPSI.data) {\n    const stationName = ClosestStation(dataPSI.data, locationUser.data).name;\n\n    const latestReading = GetLatestReading(stationName, dataPSI.data);\n\n    content = (\n      <div className=\"p-4 w-1/2 md:mb-0 mb-6 flex flex-col text-center items-center\">\n        <div className=\"w-20 h-20 inline-flex items-center justify-center rounded-full mb-3 flex-shrink-0\">\n          <FontAwesomeIcon\n            icon={PollutantClass(latestReading[pollutant], pollutant).icon}\n            size={\"3x\"}\n            color={PollutantClass(latestReading[pollutant], pollutant).color}\n          />\n        </div>\n        <div className=\"flex-grow\">\n          <Link to={GetHelpURL(pollutant)}>\n            <h2 className=\"text-lg title-font font-medium mb-3\">\n              {MapNamePollutants(pollutant, true)}:{\" \"}\n              <sup>\n                <FontAwesomeIcon icon={faQuestionCircle} />\n              </sup>\n            </h2>\n          </Link>\n          <h2 className=\"text-3xl title-font font-medium mb-3\">\n            {latestReading[pollutant]}\n            {pollutant === \"pm25_one_hourly\" ? (\n              <span className=\"text-sm\">\n                {\" \"}\n                Âµg/m<sup>3</sup>\n              </span>\n            ) : (\n              \"\"\n            )}\n          </h2>\n          <p className=\"leading-relaxed text-base\">\n            {PollutantClass(latestReading[pollutant], pollutant).description}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return <React.Fragment>{content}</React.Fragment>;\n}\n\nexport default MajorPollutants;\n","import React from \"react\";\nimport Loader from \"./Loader\";\nimport { ReadingAtUserLocation } from \"../Functions/Utils\";\n\nfunction CurrentValue({ data, locationUser }) {\n  let content = null;\n\n  if (data.error || locationUser.error) {\n    content = <div>Could not fetch API</div>;\n  }\n\n  if (data.loading && locationUser.loading) {\n    content = <Loader />;\n  }\n\n  if (data.data && locationUser.data) {\n    content = (\n      <span>{ReadingAtUserLocation(data.data, locationUser.data)}</span>\n    );\n  }\n\n  return <React.Fragment>{content}</React.Fragment>;\n}\n\nexport default CurrentValue;\n","import React from \"react\";\nimport {\n  ClosestStation,\n  ForecastToIcon,\n  TwoHForecastsAtUserLocation,\n} from \"../Functions/Utils\";\nimport Loader from \"./Loader\";\n\nfunction CurrentForecast({ dataFor2H, dataFor24H, locationUser, station }) {\n  let content = \"\";\n  if (dataFor2H.error || dataFor24H.error || locationUser.error) {\n    content = <div>Could not fetch API</div>;\n  }\n\n  if (dataFor2H.loading || dataFor24H.loading || locationUser.loading) {\n    content = <Loader />;\n  }\n\n  if (dataFor2H.data && dataFor24H.data && locationUser.data) {\n    let text = \"\";\n    let stringForecast = \"\";\n    let iconSource = \"\";\n\n    if (Object.entries(dataFor2H.data.items[0]).length === 0) {\n      text = \"next 6-h weather forecast\";\n      stringForecast = dataFor24H.data.items[0].periods[0].regions[station];\n      iconSource = ForecastToIcon(stringForecast);\n    } else {\n      text = \"next 2-hour weather forecast\";\n      stringForecast = TwoHForecastsAtUserLocation(\n        dataFor2H.data,\n        ClosestStation(dataFor2H.data, locationUser.data).name\n      );\n      iconSource = ForecastToIcon(stringForecast);\n    }\n\n    content = (\n      <div>\n        <p className=\"text-base leading-relaxed xl:w-2/4 lg:w-3/4 mx-auto\">\n          {text}: {stringForecast}\n        </p>\n        <img\n          className=\"h-12 w-full object-contain my-3\"\n          src={iconSource}\n          alt=\"current weather forecast icon\"\n        />\n      </div>\n    );\n  }\n\n  return content;\n}\n\nexport default CurrentForecast;\n","import React, { useState, useEffect } from \"react\";\nimport MajorPollutants from \"./MajorPollutants\";\nimport CurrentValue from \"./CurrentValue\";\nimport { ClosestStation } from \"../Functions/Utils\";\nimport CurrentForecast from \"./CurrentForecast\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCrosshairs } from \"@fortawesome/free-solid-svg-icons\";\nimport { Link } from \"react-router-dom\";\n\nfunction CurrentReadings({\n  dataPSI,\n  dataTmp,\n  dataRH,\n  dataFor2H,\n  dataFor24H,\n  dataPM25,\n  locationUser,\n  RequestedUseLocation,\n  showRequestLocButton,\n}) {\n  const [station, setStation] = useState(\"central\");\n\n  useEffect(() => {\n    let value = \"\";\n    if (dataFor2H.data && locationUser.data && dataPSI.data) {\n      value = ClosestStation(dataFor2H.data, locationUser.data).name;\n      if (value === undefined) {\n        value = ClosestStation(dataPSI.data, locationUser.data).name;\n      }\n      setStation(value);\n    }\n  }, [dataFor2H, dataPSI, locationUser]);\n\n  return (\n    <div className=\"container mx-auto my-3 flex px-5 items-center justify-center shadow-lg border rounded\">\n      <section className=\"text-gray-700 body-font flex-grow\">\n        <div className=\"container px-5 py-5 mx-auto\">\n          <div className=\"text-center my-3\">\n            <p className=\"text-base leading-relaxed xl:w-2/4 lg:w-3/4 mx-auto\">\n              Closest weather station:{\" \"}\n              <span className=\"capitalize\">{station}</span>\n              {/*  todo print Novena, Juron, etc. not west, east. Get the info from location metadata */}\n              {/*  todo allow user to select a station */}\n            </p>\n          </div>\n\n          <div\n            className={\n              \"container flex mx-auto justify-center\" +\n              (showRequestLocButton ? \"\" : \" hidden\")\n            }\n          >\n            <button\n              className=\"bg-gray-100 hover:bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center\"\n              onClick={() => {\n                RequestedUseLocation();\n              }}\n            >\n              Use my location\n              <span className=\"ml-2\">\n                <FontAwesomeIcon icon={faCrosshairs} />\n              </span>\n            </button>\n          </div>\n          {/* horizontal line */}\n          <div className=\"flex my-3 justify-center\">\n            <div className=\"w-16 h-1 rounded-full bg-gray-400 inline-flex\" />\n          </div>\n          <div className=\"flex flex-wrap content-between sm:-m-4 -mx-4 my-3\">\n            {/* show also AQI */}\n            <MajorPollutants\n              dataPSI={dataPSI}\n              locationUser={locationUser}\n              pollutant={\"psi_twenty_four_hourly\"}\n            />\n            <MajorPollutants\n              dataPSI={dataPM25}\n              locationUser={locationUser}\n              pollutant={\"pm25_one_hourly\"}\n            />\n          </div>\n          <div className=\"text-center my-5\">\n            <div className=\"flex my-3 justify-center\">\n              <div className=\"w-16 h-1 rounded-full bg-gray-400 inline-flex\" />\n            </div>\n            <div className=\"text-base leading-relaxed xl:w-2/4 lg:w-3/4 mx-auto\">\n              <Link to=\"/weather-singapore\">\n                Temperature:{\" \"}\n                <CurrentValue data={dataTmp} locationUser={locationUser} />\n                Â°C\n              </Link>\n            </div>\n\n            <div className=\"text-base leading-relaxed xl:w-2/4 lg:w-3/4 mx-auto\">\n              <Link to=\"/weather-singapore\">\n                Relative humidity:{\" \"}\n                <CurrentValue data={dataRH} locationUser={locationUser} />%\n              </Link>\n            </div>\n            <Link to={\"/weather-forecast-singapore\"}>\n              <CurrentForecast\n                locationUser={locationUser}\n                dataFor2H={dataFor2H}\n                dataFor24H={dataFor24H}\n                station={station}\n              />\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default CurrentReadings;\n"],"sourceRoot":""}