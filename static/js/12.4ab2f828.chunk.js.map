{"version":3,"sources":["Components/MapWeather2H.js","Components/MapWeather24H.js","Components/RainViewer.js","Views/ForecastView.js"],"names":["GetIcon","data","stationName","_iconSize","L","icon","iconUrl","ForecastToIcon","TwoHForecastsAtUserLocation","iconSize","MapWeather2H","zoom","window","width","innerWidth","height","innerHeight","Helmet","name","content","Map","center","style","zoomControl","ZoomControl","position","TileLayer","className","attribution","url","map","marker","Marker","key","label_location","latitude","longitude","Popup","regionsMetadata","west","national","east","central","south","north","MapWeather24H","useState","indexForecast","setIndexForecast","ButtonForecast","text","index","onClick","Object","keys","description","period","time","start","split","end","RainViewer","src","frameBorder","allowFullScreen","ForecastView","dataFor2H","dataFor24H","buttonSelection","setButtonSelection","subViews","LinkViewSelector","ViewSelector","view","View","selection","items","push"],"mappings":"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","file":"static/js/12.4ab2f828.chunk.js","sourcesContent":["import React from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup, ZoomControl } from \"react-leaflet\";\nimport {\n  ForecastToIcon,\n  TwoHForecastsAtUserLocation,\n} from \"../Functions/Utils\";\nimport { Helmet } from \"react-helmet\";\n\nfunction GetIcon(data, stationName, _iconSize) {\n  return L.icon({\n    iconUrl: ForecastToIcon(\n      TwoHForecastsAtUserLocation(data.data, stationName)\n    ),\n    iconSize: [_iconSize], // size of the icon\n  });\n}\n\nfunction MapWeather2H({ data }) {\n  const { innerWidth: width, innerHeight: height } = window;\n\n  let zoom, iconSize;\n  if (width > 500) {\n    zoom = 11;\n    iconSize = 35;\n  } else {\n    zoom = 10;\n    iconSize = 25;\n  }\n\n  const position = [1.3521, 103.8198];\n  return (\n    <div>\n      <Helmet>\n        <title>2-hour weather forecasts</title>\n        <meta\n          name=\"description\"\n          content=\"This page shows the next two hours weather forecasts\"\n        />\n      </Helmet>\n      <Map\n        center={position}\n        zoom={zoom}\n        style={{ height: height - 108 - 104, width: \"100%\" }}\n        zoomControl={false}\n      >\n        <ZoomControl position=\"bottomleft\" />\n        <TileLayer\n          className=\"leaflet-tile-pane\"\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {data.data\n          ? data.data[\"area_metadata\"].map((marker) => (\n              <Marker\n                key={marker.name}\n                position={[\n                  marker.label_location.latitude,\n                  marker.label_location.longitude,\n                ]}\n                icon={GetIcon(data, marker.name, iconSize)}\n              >\n                <Popup>\n                  <div className=\"text-center\">\n                    <span className=\"text-lg capitalize\">{marker.name}</span>{\" \"}\n                    <br />\n                    {TwoHForecastsAtUserLocation(data.data, marker.name)}\n                  </div>\n                </Popup>\n              </Marker>\n            ))\n          : \"\"}\n      </Map>\n    </div>\n  );\n}\n\nexport default MapWeather2H;\n","import React, { useState } from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup, ZoomControl } from \"react-leaflet\";\nimport { ForecastToIcon } from \"../Functions/Utils\";\nimport { Helmet } from \"react-helmet\";\n\nfunction GetIcon(description, _iconSize) {\n  return L.icon({\n    iconUrl: ForecastToIcon(description),\n    iconSize: [_iconSize], // size of the icon\n  });\n}\n\nconst regionsMetadata = {\n  west: { latitude: 1.35735, longitude: 103.7 },\n  national: { latitude: 0, longitude: 0 },\n  east: { latitude: 1.35735, longitude: 103.94 },\n  central: { latitude: 1.35735, longitude: 103.82 },\n  south: { latitude: 1.29587, longitude: 103.82 },\n  north: { latitude: 1.41803, longitude: 103.82 },\n};\n\nfunction MapWeather24H({ data }) {\n  const { innerWidth: width, innerHeight: height } = window;\n  const [indexForecast, setIndexForecast] = useState(0);\n\n  let zoom, iconSize;\n  if (width > 500) {\n    zoom = 11;\n    iconSize = 50;\n  } else {\n    zoom = 10;\n    iconSize = 40;\n  }\n\n  function ButtonForecast({ text, index }) {\n    if (text === \"12-18\") {\n      text = \"Afternoon\";\n    } else if (text === \"18-06\") {\n      text = \"Night\";\n    } else if (text === \"06-12\") {\n      text = \"Morning\";\n    }\n\n    return (\n      <button\n        className={\n          \"bg-white hover:bg-gray-200 text-gray-500 py-1 px-2\" +\n          (indexForecast === index\n            ? \" border text-gray-700 font-semibold\"\n            : \" border-b hover:text-gray-800 \")\n        }\n        onClick={() => setIndexForecast(index)}\n      >\n        {text}\n      </button>\n    );\n  }\n\n  const position = [1.3521, 103.8198];\n  return (\n    <div className=\"relative\">\n      <Helmet>\n        <title>24-hour weather forecasts</title>\n        <meta\n          name=\"description\"\n          content=\"This page shows the next 24 hours weather forecasts\"\n        />\n      </Helmet>\n      <Map\n        center={position}\n        zoom={zoom}\n        style={{ height: height - 108 - 104, width: \"100%\" }}\n        className=\"z-0\"\n        zoomControl={false}\n      >\n        <ZoomControl position=\"bottomleft\" />\n        <TileLayer\n          className=\"leaflet-tile-pane\"\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {data.data\n          ? Object.keys(data.data[\"items\"][0][\"periods\"][0][\"regions\"]).map(\n              (marker) => (\n                <Marker\n                  key={marker}\n                  position={[\n                    regionsMetadata[marker].latitude,\n                    regionsMetadata[marker].longitude,\n                  ]}\n                  icon={GetIcon(\n                    data.data[\"items\"][0][\"periods\"][indexForecast][\"regions\"][\n                      marker\n                    ],\n                    iconSize\n                  )}\n                >\n                  <Popup>\n                    <div className=\"text-center\">\n                      <span className=\"text-lg capitalize\">{marker}</span>{\" \"}\n                      <br />\n                      {\n                        data.data[\"items\"][0][\"periods\"][indexForecast][\n                          \"regions\"\n                        ][marker]\n                      }\n                    </div>\n                  </Popup>\n                </Marker>\n              )\n            )\n          : \"\"}\n      </Map>\n      <div className=\"z-10 absolute top-0 right-0 left-0 mx-auto text-center\">\n        <div className=\"inline-flex mt-2 shadow-lg\">\n          {data.data\n            ? data.data[\"items\"][0][\"periods\"].map((period, index) => (\n                <ButtonForecast\n                  text={\n                    period.time.start.split(\"T\")[1].split(\":\")[0] +\n                    \"-\" +\n                    period.time.end.split(\"T\")[1].split(\":\")[0]\n                  }\n                  index={index}\n                />\n              ))\n            : \"\"}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MapWeather24H;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nfunction RainViewer({ data }) {\n  const { innerWidth: width, innerHeight: height } = window;\n\n  return (\n    <div className=\"container-flex mx-auto\">\n      <Helmet>\n        <title>Rain Radar</title>\n        <meta\n          name=\"description\"\n          content=\"This page shows the rain radar data for the past two hours.\"\n        />\n      </Helmet>\n      <iframe\n        src=\"https://www.rainviewer.com/map.html?loc=1.3521,103.8198,9&oFa=0&oC=0&oU=0&oCS=1&oF=0&oAP=1&rmt=4&c=1&o=83&lm=1&th=0&sm=1&sn=1\"\n        width=\"100%\"\n        frameBorder=\"0\"\n        style={{ height: height - 108 - 104, width: \"100%\" }}\n        allowFullScreen\n      />\n    </div>\n  );\n}\n\nexport default RainViewer;\n","import React, { useEffect, useState } from \"react\";\nimport MapWeather2H from \"../Components/MapWeather2H\";\nimport MapWeather24H from \"../Components/MapWeather24H\";\nimport RainViewer from \"../Components/RainViewer\";\n\nfunction ForecastView({ dataFor2H, dataFor24H }) {\n  const [buttonSelection, setButtonSelection] = useState(\"24-h Forecast\");\n\n  let subViews = [\"24-h Forecast\", \"Rain Radar\"];\n\n  if (dataFor2H.data) {\n    if (dataFor2H.data.items === [{}]) {\n      subViews.push(\"2-h Forecast\");\n    }\n  }\n\n  function LinkViewSelector({ text }) {\n    return (\n      <li className=\"-mb-px mr-1\">\n        <span\n          className={\n            \"bg-white inline-block text-gray-500 py-2 px-4 \" +\n            (buttonSelection === text\n              ? \" border-l border-t border-r rounded-t text-gray-700 font-semibold\"\n              : \" border-b hover:text-gray-800 \")\n          }\n          onClick={() => setButtonSelection(text)}\n        >\n          {text}\n        </span>\n      </li>\n    );\n  }\n\n  function ViewSelector({ text }) {\n    return (\n      <div className=\"container mx-auto my-2 text-center text-sm\">\n        <ul className=\"flex border-b justify-center\">\n          {subViews.map((view) => (\n            <LinkViewSelector text={view} />\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  function View({ selection }) {\n    if (selection === \"2-h Forecast\") {\n      return <MapWeather2H data={dataFor2H} />;\n    } else if (selection === \"24-h Forecast\") {\n      return <MapWeather24H data={dataFor24H} />;\n    } else {\n      return <RainViewer />;\n    }\n  }\n\n  return (\n    <div>\n      <ViewSelector />\n      <View selection={buttonSelection} />\n    </div>\n  );\n}\n\nexport default ForecastView;\n"],"sourceRoot":""}