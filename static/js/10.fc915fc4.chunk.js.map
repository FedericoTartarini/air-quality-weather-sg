{"version":3,"sources":["Components/MapWeather2H.js","Components/MapWeather24H.js","Components/RainViewer.js","Views/ForecastView.js"],"names":["GetIcon","data","stationName","_iconSize","L","icon","iconUrl","ForecastToIcon","TwoHForecastsAtUserLocation","iconSize","MapWeather2H","zoom","window","width","innerWidth","height","innerHeight","Map","center","style","TileLayer","className","attribution","url","map","marker","Marker","key","name","position","label_location","latitude","longitude","Popup","regionsMetadata","west","national","east","central","south","north","MapWeather24H","useState","indexForecast","setIndexForecast","ButtonForecast","text","index","onClick","Object","keys","description","period","time","start","split","end","RainViewer","src","frameBorder","allowFullScreen","ForecastView","dataFor2H","dataFor24H","buttonSelection","setButtonSelection","LinkViewSelector","ViewSelector","View","selection"],"mappings":"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","file":"static/js/10.fc915fc4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport {\n  ForecastToIcon,\n  TwoHForecastsAtUserLocation,\n} from \"../Functions/Utils\";\n\nfunction GetIcon(data, stationName, _iconSize) {\n  const Icon = L.icon({\n    iconUrl: ForecastToIcon(\n      TwoHForecastsAtUserLocation(data.data, stationName)\n    ),\n    iconSize: [_iconSize], // size of the icon\n  });\n  return Icon;\n}\n\nfunction MapWeather2H({ data }) {\n  const { innerWidth: width, innerHeight: height } = window;\n\n  let zoom, iconSize;\n  if (width > 500) {\n    zoom = 11;\n    iconSize = 35;\n  } else {\n    zoom = 10;\n    iconSize = 25;\n  }\n\n  const position = [1.3521, 103.8198];\n  return (\n    <Map\n      center={position}\n      zoom={zoom}\n      style={{ height: height - 108 - 104, width: \"100%\" }}\n    >\n      <TileLayer\n        className=\"leaflet-tile-pane\"\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {data.data\n        ? data.data[\"area_metadata\"].map((marker) => (\n            <Marker\n              key={marker.name}\n              position={[\n                marker.label_location.latitude,\n                marker.label_location.longitude,\n              ]}\n              icon={GetIcon(data, marker.name, iconSize)}\n            >\n              <Popup>\n                <div className=\"text-center\">\n                  <span className=\"text-lg capitalize\">{marker.name}</span>{\" \"}\n                  <br />\n                  {TwoHForecastsAtUserLocation(data.data, marker.name)}\n                </div>\n              </Popup>\n            </Marker>\n          ))\n        : \"\"}\n    </Map>\n  );\n}\n\nexport default MapWeather2H;\n","import React, { useState } from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { ForecastToIcon } from \"../Functions/Utils\";\n\nfunction GetIcon(description, _iconSize) {\n  const Icon = L.icon({\n    iconUrl: ForecastToIcon(description),\n    iconSize: [_iconSize], // size of the icon\n  });\n  return Icon;\n}\n\nconst regionsMetadata = {\n  west: { latitude: 1.35735, longitude: 103.7 },\n  national: { latitude: 0, longitude: 0 },\n  east: { latitude: 1.35735, longitude: 103.94 },\n  central: { latitude: 1.35735, longitude: 103.82 },\n  south: { latitude: 1.29587, longitude: 103.82 },\n  north: { latitude: 1.41803, longitude: 103.82 },\n};\n\nfunction MapWeather24H({ data }) {\n  const { innerWidth: width, innerHeight: height } = window;\n  const [indexForecast, setIndexForecast] = useState(0);\n\n  let zoom, iconSize;\n  if (width > 500) {\n    zoom = 11;\n    iconSize = 45;\n  } else {\n    zoom = 10;\n    iconSize = 30;\n  }\n\n  function ButtonForecast({ text, index }) {\n    if (text === \"12-18\") {\n      text = \"Next 6-h\";\n    } else if (text === \"18-06\") {\n      text = \"Night\";\n    } else if (text === \"06-12\") {\n      text = \"Morning\";\n    }\n\n    return (\n      <button\n        className={\n          \"bg-white hover:bg-gray-200 text-gray-500 py-1 px-3\" +\n          (indexForecast === index\n            ? \" border text-gray-700 font-semibold\"\n            : \" border-b hover:text-gray-800 \")\n        }\n        onClick={() => setIndexForecast(index)}\n      >\n        {text}\n      </button>\n    );\n  }\n\n  const position = [1.3521, 103.8198];\n  return (\n    <div className=\"relative\">\n      <Map\n        center={position}\n        zoom={zoom}\n        style={{ height: height - 108 - 104, width: \"100%\" }}\n        className=\"z-0\"\n      >\n        <TileLayer\n          className=\"leaflet-tile-pane\"\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {data.data\n          ? Object.keys(data.data[\"items\"][0][\"periods\"][0][\"regions\"]).map(\n              (marker) => (\n                <Marker\n                  key={marker}\n                  position={[\n                    regionsMetadata[marker].latitude,\n                    regionsMetadata[marker].longitude,\n                  ]}\n                  icon={GetIcon(\n                    data.data[\"items\"][0][\"periods\"][indexForecast][\"regions\"][\n                      marker\n                    ],\n                    iconSize\n                  )}\n                >\n                  <Popup>\n                    <div className=\"text-center\">\n                      <span className=\"text-lg capitalize\">{marker}</span>{\" \"}\n                      <br />\n                      {\n                        data.data[\"items\"][0][\"periods\"][indexForecast][\n                          \"regions\"\n                        ][marker]\n                      }\n                    </div>\n                  </Popup>\n                </Marker>\n              )\n            )\n          : \"\"}\n      </Map>\n      <div className=\"z-10 absolute top-0 right-0 left-0 mx-auto text-center\">\n        <div className=\"inline-flex mt-2 shadow-lg\">\n          {data.data\n            ? data.data[\"items\"][0][\"periods\"].map((period, index) => (\n                <ButtonForecast\n                  text={\n                    period.time.start.split(\"T\")[1].split(\":\")[0] +\n                    \"-\" +\n                    period.time.end.split(\"T\")[1].split(\":\")[0]\n                  }\n                  index={index}\n                />\n              ))\n            : \"\"}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MapWeather24H;\n","import React from \"react\";\n\nfunction RainViewer({ data }) {\n  const { innerWidth: width, innerHeight: height } = window;\n\n  return (\n    <div className=\"container-flex mx-auto\">\n      <iframe\n        src=\"https://www.rainviewer.com/map.html?loc=1.3521,103.8198,9&oFa=0&oC=0&oU=0&oCS=1&oF=0&oAP=1&rmt=4&c=1&o=83&lm=1&th=0&sm=1&sn=1\"\n        width=\"100%\"\n        frameBorder=\"0\"\n        style={{ height: height - 108 - 104, width: \"100%\" }}\n        allowFullScreen\n      />\n    </div>\n  );\n}\n\nexport default RainViewer;\n","import React, { useEffect, useState } from \"react\";\nimport MapWeather2H from \"../Components/MapWeather2H\";\nimport MapWeather24H from \"../Components/MapWeather24H\";\nimport RainViewer from \"../Components/RainViewer\";\n\nfunction ForecastView({ dataFor2H, dataFor24H }) {\n  const [buttonSelection, setButtonSelection] = useState(\"2-h Forecast\");\n\n  function LinkViewSelector({ text }) {\n    return (\n      <li className=\"-mb-px mr-1\">\n        <span\n          className={\n            \"bg-white inline-block text-gray-500 py-2 px-4 \" +\n            (buttonSelection === text\n              ? \" border-l border-t border-r rounded-t text-gray-700 font-semibold\"\n              : \" border-b hover:text-gray-800 \")\n          }\n          onClick={() => setButtonSelection(text)}\n        >\n          {text}\n        </span>\n      </li>\n    );\n  }\n\n  function ViewSelector({ text }) {\n    return (\n      <div className=\"container mx-auto my-2 text-center text-sm\">\n        <ul className=\"flex border-b justify-center\">\n          <LinkViewSelector text={\"2-h Forecast\"} />\n          <LinkViewSelector text={\"24-h Forecast\"} />\n          <LinkViewSelector text={\"Rain Radar\"} />\n        </ul>\n      </div>\n    );\n  }\n\n  function View({ selection }) {\n    if (selection === \"2-h Forecast\") {\n      return <MapWeather2H data={dataFor2H} />;\n    } else if (selection === \"24-h Forecast\") {\n      return <MapWeather24H data={dataFor24H} />;\n    } else {\n      return <RainViewer />;\n    }\n  }\n\n  return (\n    <div>\n      <ViewSelector />\n      <View selection={buttonSelection} />\n    </div>\n  );\n}\n\nexport default ForecastView;\n"],"sourceRoot":""}