{"version":3,"sources":["Components/MajorPollutants.js","Components/CurrentForecast.js","Components/CurrentValue.js","Components/CurrentReadings.js"],"names":["MajorPollutants","dataPSI","locationUser","pollutant","content","error","loading","className","Loader","data","items","length","stationName","ClosestStation","name","latestReading","GetLatestReading","icon","PollutantClass","size","color","to","GetHelpURL","MapNamePollutants","faQuestionCircle","description","Fragment","CurrentForecast","dataFor2H","dataFor24H","station","text","stringForecast","iconSource","Object","entries","periods","regions","ForecastToIcon","TwoHForecastsAtUserLocation","src","alt","CurrentValue","dataTmp","dataRH","ReadingAtUserLocation","CurrentReadings","dataPM25","RequestedUseLocation","showRequestLocButton","useState","setStation","useEffect","value","undefined","onClick","faCrosshairs"],"mappings":"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","file":"static/js/15.e6bdbeb8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Loader from \"./Loader\";\r\nimport {\r\n  ClosestStation,\r\n  GetLatestReading,\r\n  MapNamePollutants,\r\n  PollutantClass,\r\n  GetHelpURL,\r\n} from \"../Functions/Utils\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction MajorPollutants({ dataPSI, locationUser, pollutant }) {\r\n  let content = null;\r\n\r\n  if (locationUser.error || dataPSI.error) {\r\n    content = <div>Could not fetch API</div>;\r\n  }\r\n\r\n  if (locationUser.loading || dataPSI.loading) {\r\n    content = (\r\n      <div className=\"container mx-auto\">\r\n        <Loader />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (locationUser.data && dataPSI.data && dataPSI.data.items.length !== 0) {\r\n    const stationName = ClosestStation(dataPSI.data, locationUser.data).name;\r\n\r\n    const latestReading = GetLatestReading(stationName, dataPSI.data);\r\n\r\n    content = (\r\n      <div className=\"p-4 w-1/2 md:mb-0 mb-6 flex flex-col text-center items-center\">\r\n        <div className=\"w-20 h-20 inline-flex items-center justify-center rounded-full mb-3 flex-shrink-0\">\r\n          <FontAwesomeIcon\r\n            icon={PollutantClass(latestReading[pollutant], pollutant).icon}\r\n            size={\"3x\"}\r\n            color={PollutantClass(latestReading[pollutant], pollutant).color}\r\n          />\r\n        </div>\r\n        <div className=\"flex-grow\">\r\n          <Link to={GetHelpURL(pollutant)}>\r\n            <h2 className=\"text-lg title-font font-medium mb-3\">\r\n              {MapNamePollutants(pollutant, true)}:{\" \"}\r\n              <sup>\r\n                <FontAwesomeIcon icon={faQuestionCircle} />\r\n              </sup>\r\n            </h2>\r\n          </Link>\r\n          <h2 className=\"text-3xl title-font font-medium mb-3\">\r\n            {latestReading[pollutant]}\r\n            {pollutant === \"pm25_one_hourly\" ? (\r\n              <span className=\"text-sm\">\r\n                {\" \"}\r\n                µg/m<sup>3</sup>\r\n              </span>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </h2>\r\n          <p className=\"leading-relaxed text-base\">\r\n            {PollutantClass(latestReading[pollutant], pollutant).description}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <React.Fragment>{content}</React.Fragment>;\r\n}\r\n\r\nexport default MajorPollutants;\r\n","import React from \"react\";\r\nimport {\r\n  ClosestStation,\r\n  ForecastToIcon,\r\n  TwoHForecastsAtUserLocation,\r\n} from \"../Functions/Utils\";\r\nimport Loader from \"./Loader\";\r\n\r\nfunction CurrentForecast({ dataFor2H, dataFor24H, locationUser, station }) {\r\n  let content = \"\";\r\n  if (dataFor2H.error || dataFor24H.error || locationUser.error) {\r\n    content = (\r\n      <p className=\"p-5\">\r\n        data.gov.sg is under maintenance and we could not download the\r\n        current weather forecasts. Please try again later. Sorry for the inconvenience.\r\n      </p>\r\n    );\r\n  } else if (dataFor2H.loading || dataFor24H.loading || locationUser.loading) {\r\n    content = <Loader />;\r\n  } else if (dataFor2H.data && dataFor24H.data && locationUser.data) {\r\n    let text;\r\n    let stringForecast;\r\n    let iconSource;\r\n\r\n    if (Object.entries(dataFor2H.data.items[0]).length === 0) {\r\n      text = \"next 6-h weather forecast\";\r\n      stringForecast = dataFor24H.data.items[0].periods[0].regions[station];\r\n      iconSource = ForecastToIcon(stringForecast);\r\n    } else {\r\n      text = \"next 2-hour weather forecast\";\r\n      stringForecast = TwoHForecastsAtUserLocation(\r\n        dataFor2H.data,\r\n        ClosestStation(dataFor2H.data, locationUser.data).name\r\n      );\r\n      iconSource = ForecastToIcon(stringForecast);\r\n    }\r\n\r\n    content = (\r\n      <div>\r\n        <p className=\"text-base leading-relaxed xl:w-2/4 lg:w-3/4 mx-auto\">\r\n          {text}: {stringForecast}\r\n        </p>\r\n        <img\r\n          className=\"h-12 w-full object-contain my-3\"\r\n          src={iconSource}\r\n          alt=\"current weather forecast icon\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\nexport default CurrentForecast;\r\n","import React from \"react\";\r\nimport Loader from \"./Loader\";\r\nimport { ReadingAtUserLocation } from \"../Functions/Utils\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction CurrentValue({ dataTmp, dataRH, locationUser }) {\r\n  let content = null;\r\n\r\n  if (dataTmp.error || dataRH.error || locationUser.error) {\r\n    content =\r\n      // <p className=\"p-5\">\r\n      //   data.gov.sg is under maintenance and we could not download the\r\n      //   current weather conditions. Please try again later. Sorry for the inconvenience.\r\n      // </p>\r\n      \"\";\r\n  } else if (dataTmp.loading && dataRH.loading && locationUser.loading) {\r\n    content = <Loader />;\r\n  } else if (dataTmp.data && dataRH.data && locationUser.data) {\r\n    content = (\r\n      <div>\r\n        <div className=\"flex my-3 justify-center\">\r\n          <div className=\"w-16 h-1 rounded-full bg-gray-400 inline-flex\" />\r\n        </div>\r\n        <div className=\"text-base leading-relaxed py-1 xl:w-2/4 lg:w-3/4 mx-auto\">\r\n          <Link to=\"/weather-singapore\">\r\n            Temperature:{\" \"}\r\n            <span>\r\n              {ReadingAtUserLocation(dataTmp.data, locationUser.data)}\r\n            </span>\r\n            °C\r\n          </Link>\r\n        </div>\r\n        <div className=\"text-base leading-relaxed py-1 xl:w-2/4 lg:w-3/4 mx-auto\">\r\n          <Link to=\"/weather-singapore\">\r\n            Relative humidity:{\" \"}\r\n            <span>{ReadingAtUserLocation(dataRH.data, locationUser.data)}</span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <React.Fragment>{content}</React.Fragment>;\r\n}\r\n\r\nexport default CurrentValue;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MajorPollutants from \"./MajorPollutants\";\r\nimport { ClosestStation } from \"../Functions/Utils\";\r\nimport CurrentForecast from \"./CurrentForecast\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCrosshairs } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CurrentValue from \"./CurrentValue\";\r\n\r\nfunction CurrentReadings({\r\n  dataPSI,\r\n  dataTmp,\r\n  dataRH,\r\n  dataFor2H,\r\n  dataFor24H,\r\n  dataPM25,\r\n  locationUser,\r\n  RequestedUseLocation,\r\n  showRequestLocButton,\r\n}) {\r\n  const [station, setStation] = useState(\"central\");\r\n\r\n  useEffect(() => {\r\n    let value = \"\";\r\n    if (dataFor2H.data && locationUser.data && dataPSI.data) {\r\n      value = ClosestStation(dataFor2H.data, locationUser.data).name;\r\n      if (value === undefined) {\r\n        value = ClosestStation(dataPSI.data, locationUser.data).name;\r\n      }\r\n      setStation(value);\r\n    }\r\n  }, [dataFor2H, dataPSI, locationUser]);\r\n\r\n  return (\r\n    <div className=\"container mx-auto my-3 flex px-5 items-center justify-center shadow-lg border rounded\">\r\n      <section className=\"text-gray-700 body-font flex-grow\">\r\n        <div className=\"container px-5 py-5 mx-auto\">\r\n          <div className=\"text-center my-3\">\r\n            <p className=\"text-base leading-relaxed xl:w-2/4 lg:w-3/4 mx-auto\">\r\n              Closest weather station:{\" \"}\r\n              <span className=\"capitalize\">{station}</span>\r\n              {/*  todo print Novena, Juron, etc. not west, east. Get the info from location metadata */}\r\n              {/*  todo allow user to select a station */}\r\n            </p>\r\n          </div>\r\n\r\n          <div\r\n            className={\r\n              \"container flex mx-auto justify-center\" +\r\n              (showRequestLocButton ? \"\" : \" hidden\")\r\n            }\r\n          >\r\n            <button\r\n              className=\"bg-gray-100 hover:bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center\"\r\n              onClick={() => {\r\n                RequestedUseLocation();\r\n              }}\r\n            >\r\n              Use my location\r\n              <span className=\"ml-2\">\r\n                <FontAwesomeIcon icon={faCrosshairs} />\r\n              </span>\r\n            </button>\r\n          </div>\r\n          {/* horizontal line */}\r\n          <div className=\"flex my-3 justify-center\">\r\n            <div className=\"w-16 h-1 rounded-full bg-gray-400 inline-flex\" />\r\n          </div>\r\n          <div className=\"flex flex-wrap content-between sm:-m-4 -mx-4 my-3\">\r\n            {/* show also AQI */}\r\n            <MajorPollutants\r\n              dataPSI={dataPSI}\r\n              locationUser={locationUser}\r\n              pollutant={\"psi_twenty_four_hourly\"}\r\n            />\r\n            <MajorPollutants\r\n              dataPSI={dataPM25}\r\n              locationUser={locationUser}\r\n              pollutant={\"pm25_one_hourly\"}\r\n            />\r\n          </div>\r\n          <div className=\"text-center my-5\">\r\n            <CurrentValue\r\n              dataTmp={dataTmp}\r\n              dataRH={dataRH}\r\n              locationUser={locationUser}\r\n            />\r\n            <Link to={\"/weather-forecast-singapore\"}>\r\n              <CurrentForecast\r\n                locationUser={locationUser}\r\n                dataFor2H={dataFor2H}\r\n                dataFor24H={dataFor24H}\r\n                station={station}\r\n              />\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CurrentReadings;\r\n"],"sourceRoot":""}