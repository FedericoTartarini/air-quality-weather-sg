{"version":3,"sources":["Components/Loader.js","logo.svg","Components/NavigationBar.js","Components/Footer.js","Hooks/HttpRequest.js","App.js","Hooks/GetLocation.js","serviceWorker.js","index.js"],"names":["Loader","className","module","exports","logo","require","NavigationBar","React","useState","navbarOpen","setNavbarOpen","to","src","alt","width","type","onClick","viewBox","xmlns","d","Footer","props","href","rel","target","icon","faLinkedin","size","faGithub","faResearchgate","faGooglePlay","useHttpRequest","url","loading","data","error","request","setRequest","useEffect","console","log","axios","get","then","response","catch","AboutView","lazy","MapPollutionView","ForecastView","CurrentReadingsView","ChartsView","App","currentDate","Date","getTimezoneOffset","isoString","toISOString","substr","urlRH","urlTmp","urlWeather2H","urlWeather24H","split","dateString","urlPSI","urlPM25","dataPSI","dataTmp","dataRH","dataPM25","dataFor2H","dataFor24H","locationUser","location","setLocation","getCoordinates","position","coords","showError","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","code","PERMISSION_DENIED","alert","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERR","navigator","geolocation","getCurrentPosition","useGetLocation","basename","fallback","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"mIAAA,oBAUeA,IARf,WACE,OACE,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,c,mBCLrBC,EAAOC,QAAU,IAA0B,kC,4JCGrCC,EAAOC,EAAQ,IAuENC,MArEf,WAA0B,IAAD,EACaC,IAAMC,UAAS,GAD5B,mBAChBC,EADgB,KACJC,EADI,KAEvB,OACE,yBAAKT,UAAU,eACb,yBAAKA,UAAU,qEACb,kBAAC,IAAD,CAAMU,GAAG,KACP,yBAAKV,UAAU,mCACb,yBAAKW,IAAKR,EAAMS,IAAI,OAAOC,MAAO,KAClC,0BAAMb,UAAU,kDAAhB,kCAKJ,yBAAKA,UAAU,mBACb,4BACEA,UAAU,oFACVc,KAAK,SACLC,QAAS,kBAAMN,GAAeD,KAE9B,yBACER,UAAU,uBACVgB,QAAQ,YACRC,MAAM,8BAEN,uCACA,0BAAMC,EAAE,mDAId,yBACElB,UACE,2DACCQ,EAAa,GAAK,WAErBO,QAAS,kBAAMN,GAAeD,KAE9B,yBAAKR,UAAU,wBACb,kBAAC,IAAD,CAAMU,GAAG,KACP,0BAAMV,UAAU,+DAAhB,SAIF,kBAAC,IAAD,CAAMU,GAAG,WACP,0BAAMV,UAAU,+DAAhB,WAIF,kBAAC,IAAD,CAAMU,GAAG,aACP,0BAAMV,UAAU,8DAAhB,aAIF,kBAAC,IAAD,CAAMU,GAAG,iBACP,0BAAMV,UAAU,8DAAhB,kBAIF,kBAAC,IAAD,CAAMU,GAAG,UACP,0BAAMV,UAAU,8DAAhB,e,gBCvDRG,EAAOC,EAAQ,IAoDNe,MAlDf,SAAgBC,GACd,OACE,4BAAQpB,UAAU,2CAChB,yBAAKA,UAAU,sEACb,uBAAGA,UAAU,0FACX,yBAAKW,IAAKR,EAAMS,IAAI,OAAOC,MAAO,KAClC,0BAAMb,UAAU,gBAAhB,4BAEF,uBAAGA,UAAU,+FAAb,YAEE,uBACEqB,KAAK,sCACLrB,UAAU,qBACVsB,IAAI,sBACJC,OAAO,UAJT,uBASF,0BAAMvB,UAAU,uEACd,uBACEA,UAAU,qBACVqB,KAAK,4DAEL,kBAAC,IAAD,CAAiBG,KAAMC,IAAYC,KAAM,QAE3C,uBACE1B,UAAU,qBACVqB,KAAK,wCAEL,kBAAC,IAAD,CAAiBG,KAAMG,IAAUD,KAAM,QAEzC,uBACE1B,UAAU,qBACVqB,KAAK,2DAEL,kBAAC,IAAD,CAAiBG,KAAMI,IAAgBF,KAAM,QAE/C,uBACE1B,UAAU,qBACVqB,KAAK,mEAEL,kBAAC,IAAD,CAAiBG,KAAMK,IAAcH,KAAM,Y,iBCjDhD,SAASI,EAAeC,GAAM,IAAD,EACJxB,mBAAS,CACrCyB,SAAS,EACTC,KAAM,KACNC,OAAO,IAJyB,mBAC3BC,EAD2B,KAClBC,EADkB,KAgClC,OAzBAC,qBAAU,WACRD,EAAW,CACTJ,SAAS,EACTC,KAAM,KACNC,OAAO,IAETI,QAAQC,IAAI,wBAA0BR,GACtCS,IACGC,IAAIV,GACJW,MAAK,SAACC,GACLP,EAAW,CACTJ,SAAS,EACTC,KAAMU,EAASV,KACfC,OAAO,OAGVU,OAAM,WACLR,EAAW,CACTJ,SAAS,EACTC,KAAM,KACNC,OAAO,SAGZ,CAACH,IAEGI,E,uBC3BHU,EAAYC,gBAAK,kBAAM,wDACvBC,EAAmBD,gBAAK,kBAAM,4EAC9BE,EAAeF,gBAAK,kBAAM,6EAC1BG,EAAsBH,gBAAK,kBAAM,qEACjCI,EAAaJ,gBAAK,kBAAM,6EAoFfK,MAlFf,WACE,IAAIC,EAAc,IAAIC,KACtBD,GAA8D,IAAlCA,EAAYE,oBAExC,IAAIC,GADJH,EAAc,IAAIC,KAAKD,IACKI,cAAcC,OAAO,EAAG,IAE9CC,EACJ,sEACAH,EACII,EACJ,oEACAJ,EACIK,EACJ,4EACAL,EACIM,EACJ,6EACAN,EAG4C,OAA1CA,EAAUO,MAAM,KAAK,GAAGA,MAAM,KAAK,KACrCV,GAA4B,MAE5BG,GADAH,EAAc,IAAIC,KAAKD,IACCI,cAAcC,OAAO,EAAG,KAGlD,IAAMM,EAAaR,EAAUO,MAAM,KAAK,GAClCE,EACJ,mDAAqDD,EACjDE,EACJ,oDAAsDF,EAElDG,EAAUpC,EAAekC,GACzBG,EAAUrC,EAAe6B,GACzBS,EAAStC,EAAe4B,GACxBW,EAAWvC,EAAemC,GAC1BK,EAAYxC,EAAe8B,GAC3BW,EAAazC,EAAe+B,GAC5BW,EClDD,SAAwBpD,GAAQ,IAAD,EACJb,mBAAS,CACvCyB,SAAS,EACTC,KAAM,KACNC,OAAO,IAJ2B,mBAC7BuC,EAD6B,KACnBC,EADmB,KAOpC,SAASC,EAAeC,GACtBF,EAAY,CACV1C,SAAS,EACTC,KAAM2C,EAASC,OACf3C,OAAO,IAIX,SAAS4C,EAAU5C,GAejB,OAdAwC,EAAY,CACV1C,SAAS,EACTC,KAAM,CACJ8C,SAAU,KACVC,SAAU,KACVC,iBAAkB,KAClBC,QAAS,KACTC,SAAU,mBACVC,UAAW,WACXC,MAAO,MAETnD,OAAO,IAGDA,EAAMoD,MACZ,KAAKpD,EAAMqD,kBACTC,MACE,gGAGF,MACF,KAAKtD,EAAMuD,qBACTD,MACE,4FAGF,MACF,KAAKtD,EAAMwD,QACTF,MACE,mGAGF,MACF,KAAKtD,EAAMyD,YACTH,MACE,mFAeR,OARAnD,qBAAU,WACRC,QAAQC,IAAI,uBACRqD,UAAUC,YACZD,UAAUC,YAAYC,mBAAmBnB,EAAgBG,GAEzDU,MAAM,kDAEP,CAACpE,IACGqD,EDhBcsB,CAAe/B,GAMpC,OACE,kBAAC,IAAD,CAAQgC,SAAS,KACf,yBAAKhG,UAAU,+BACb,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUiG,SAAU,kBAAClG,EAAA,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmG,OAAK,EAACC,KAAK,KAChB,kBAAClD,EAAD,CACEiB,QAASA,EACTC,QAASA,EACTC,OAAQA,EACRE,UAAWA,EACXD,SAAUA,EACVG,aAAcA,KAGlB,kBAAC,IAAD,CAAO2B,KAAK,WACV,kBAACjD,EAAD,CAAYjB,KAAMiC,EAASM,aAAcA,KAE3C,kBAAC,IAAD,CAAO2B,KAAK,aACV,kBAACnD,EAAD,CAAcsB,UAAWA,EAAWC,WAAYA,KAElD,kBAAC,IAAD,CAAO4B,KAAK,iBACV,kBAACpD,EAAD,CAAkBd,KAAMiC,KAE1B,kBAAC,IAAD,CAAOiC,KAAK,UACV,kBAACtD,EAAD,SAIN,6BACE,kBAAC,EAAD,UE7EUuD,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBhB,WACrBA,UAAUiB,cAAcC,MACrBpE,MAAK,SAAAqE,GACJA,EAAaC,gBAEdpE,OAAM,SAAAV,GACLI,QAAQJ,MAAMA,EAAM+E,c","file":"static/js/main.4de004cc.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Loader() {\n  return (\n    <div className=\"flex justify-center\">\n      <div className=\"loader\"></div>\n    </div>\n  );\n}\n\nexport default Loader;\n","module.exports = __webpack_public_path__ + \"static/media/logo.f95ef2cb.svg\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst logo = require(\"../logo.svg\");\n\nfunction NavigationBar() {\n  const [navbarOpen, setNavbarOpen] = React.useState(false);\n  return (\n    <div className=\"bg-gray-100\">\n      <nav className=\"container mx-auto flex items-center justify-between flex-wrap p-6\">\n        <Link to=\"/\">\n          <div className=\"flex items-center flex-shrink-0\">\n            <img src={logo} alt=\"logo\" width={50} />\n            <span className=\"font-semibold text-xl tracking-tight ml-3 w-40\">\n              Air Quality and Weather - SG\n            </span>\n          </div>\n        </Link>\n        <div className=\"block xl:hidden\">\n          <button\n            className=\"flex items-center px-3 py-2 border rounded hover:text-gray-600 hover:border-white\"\n            type=\"button\"\n            onClick={() => setNavbarOpen(!navbarOpen)}\n          >\n            <svg\n              className=\"fill-current h-3 w-3\"\n              viewBox=\"0 0 20 20\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <title>Menu</title>\n              <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\n            </svg>\n          </button>\n        </div>\n        <div\n          className={\n            \"w-full block flex-end xl:flex xl:items-center xl:w-auto\" +\n            (navbarOpen ? \"\" : \" hidden\")\n          }\n          onClick={() => setNavbarOpen(!navbarOpen)}\n        >\n          <div className=\"text-sm xl:flex-grow\">\n            <Link to=\"/\">\n              <span className=\"block mt-4 xl:inline-block xl:mt-0 hover:text-gray-600 ml-4\">\n                Home\n              </span>\n            </Link>\n            <Link to=\"/charts\">\n              <span className=\"block mt-4 xl:inline-block xl:mt-0 hover:text-gray-600 ml-4\">\n                Charts\n              </span>\n            </Link>\n            <Link to=\"/forecast\">\n              <span className=\"block mt-4 xl:inline-block xl:mt-0 over:text-gray-600 ml-4\">\n                Forecast\n              </span>\n            </Link>\n            <Link to=\"/mapPollution\">\n              <span className=\"block mt-4 xl:inline-block xl:mt-0 over:text-gray-600 ml-4\">\n                Map Pollution\n              </span>\n            </Link>\n            <Link to=\"/about\">\n              <span className=\"block mt-4 xl:inline-block xl:mt-0 over:text-gray-600 ml-4\">\n                About\n              </span>\n            </Link>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default NavigationBar;\n","import React from \"react\";\nimport {\n  faGithub,\n  faGooglePlay,\n  faLinkedin,\n  faResearchgate,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nconst logo = require(\"../logo.svg\");\n\nfunction Footer(props) {\n  return (\n    <footer className=\"text-gray-700 body-font absolute w-full\">\n      <div className=\"container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col\">\n        <a className=\"flex title-font font-medium items-center md:justify-start justify-center text-gray-900\">\n          <img src={logo} alt=\"logo\" width={40} />\n          <span className=\"ml-3 text-xl\">Air Quality and Weather</span>\n        </a>\n        <p className=\"text-sm text-gray-500 sm:ml-4 sm:pl-4 sm:border-l-2 sm:border-gray-200 sm:py-2 sm:mt-0 mt-4\">\n          Â© 2020\n          <a\n            href=\"https://federicotartarini.github.io\"\n            className=\"text-gray-600 ml-1\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Federico Tartarini\n          </a>\n        </p>\n        <span className=\"inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start\">\n          <a\n            className=\"text-gray-500 mx-1\"\n            href=\"https://www.linkedin.com/in/federico-tartarini-3991995b/\"\n          >\n            <FontAwesomeIcon icon={faLinkedin} size={\"lg\"} />\n          </a>\n          <a\n            className=\"text-gray-500 mx-1\"\n            href=\"https://github.com/FedericoTartarini\"\n          >\n            <FontAwesomeIcon icon={faGithub} size={\"lg\"} />\n          </a>\n          <a\n            className=\"text-gray-500 mx-1\"\n            href=\"https://www.researchgate.net/profile/Federico_Tartarini\"\n          >\n            <FontAwesomeIcon icon={faResearchgate} size={\"lg\"} />\n          </a>\n          <a\n            className=\"text-gray-500 mx-1\"\n            href=\"https://play.google.com/store/apps/details?id=com.airqualityapp\"\n          >\n            <FontAwesomeIcon icon={faGooglePlay} size={\"lg\"} />\n          </a>\n        </span>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport function useHttpRequest(url) {\n  const [request, setRequest] = useState({\n    loading: false,\n    data: null,\n    error: false,\n  });\n\n  useEffect(() => {\n    setRequest({\n      loading: true,\n      data: null,\n      error: false,\n    });\n    console.log(\"Requesting API data: \" + url);\n    axios\n      .get(url)\n      .then((response) => {\n        setRequest({\n          loading: false,\n          data: response.data,\n          error: false,\n        });\n      })\n      .catch(() => {\n        setRequest({\n          loading: false,\n          data: null,\n          error: true,\n        });\n      });\n  }, [url]);\n\n  return request;\n}\n","import React, { Suspense, lazy } from \"react\";\nimport NavigationBar from \"./Components/NavigationBar\";\nimport Footer from \"./Components/Footer\";\nimport { useHttpRequest } from \"./Hooks/HttpRequest\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { useGetLocation } from \"./Hooks/GetLocation\";\nimport Loader from \"./Components/Loader\";\n\nconst AboutView = lazy(() => import(\"./Views/AboutView\"));\nconst MapPollutionView = lazy(() => import(\"./Views/MapPollutionView\"));\nconst ForecastView = lazy(() => import(\"./Views/ForecastView\"));\nconst CurrentReadingsView = lazy(() => import(\"./Views/CurrentReadingsView\"));\nconst ChartsView = lazy(() => import(\"./Views/ChartsView\"));\n\nfunction App() {\n  let currentDate = new Date();\n  currentDate = currentDate - currentDate.getTimezoneOffset() * 60000;\n  currentDate = new Date(currentDate);\n  let isoString = currentDate.toISOString().substr(0, 19);\n\n  const urlRH =\n    \"https://api.data.gov.sg/v1/environment/relative-humidity?date_time=\" +\n    isoString;\n  const urlTmp =\n    \"https://api.data.gov.sg/v1/environment/air-temperature?date_time=\" +\n    isoString;\n  const urlWeather2H =\n    \"https://api.data.gov.sg/v1/environment/2-hour-weather-forecast?date_time=\" +\n    isoString;\n  const urlWeather24H =\n    \"https://api.data.gov.sg/v1/environment/24-hour-weather-forecast?date_time=\" +\n    isoString;\n\n  // if it is midnight I am querying the previous day\n  if (isoString.split(\"T\")[1].split(\":\")[0] === \"00\") {\n    currentDate = currentDate - 12 * 60 * 60000;\n    currentDate = new Date(currentDate);\n    isoString = currentDate.toISOString().substr(0, 19);\n  }\n\n  const dateString = isoString.split(\"T\")[0];\n  const urlPSI =\n    \"https://api.data.gov.sg/v1/environment/psi?date=\" + dateString;\n  const urlPM25 =\n    \"https://api.data.gov.sg/v1/environment/pm25?date=\" + dateString;\n\n  const dataPSI = useHttpRequest(urlPSI);\n  const dataTmp = useHttpRequest(urlTmp);\n  const dataRH = useHttpRequest(urlRH);\n  const dataPM25 = useHttpRequest(urlPM25);\n  const dataFor2H = useHttpRequest(urlWeather2H);\n  const dataFor24H = useHttpRequest(urlWeather24H);\n  const locationUser = useGetLocation(urlPSI);\n\n  // todo select a better color palette for icons and website\n  // todo add licence file\n  // mention in each page data source\n\n  return (\n    <Router basename=\"/\">\n      <div className=\"relative pb-10 min-h-screen\">\n        <NavigationBar />\n        <Suspense fallback={<Loader />}>\n          <Switch>\n            <Route exact path=\"/\">\n              <CurrentReadingsView\n                dataPSI={dataPSI}\n                dataTmp={dataTmp}\n                dataRH={dataRH}\n                dataFor2H={dataFor2H}\n                dataPM25={dataPM25}\n                locationUser={locationUser}\n              />\n            </Route>\n            <Route path=\"/charts\">\n              <ChartsView data={dataPSI} locationUser={locationUser} />\n            </Route>\n            <Route path=\"/forecast\">\n              <ForecastView dataFor2H={dataFor2H} dataFor24H={dataFor24H} />\n            </Route>\n            <Route path=\"/mapPollution\">\n              <MapPollutionView data={dataPSI} />\n            </Route>\n            <Route path=\"/about\">\n              <AboutView />\n            </Route>\n          </Switch>\n        </Suspense>\n        <div>\n          <Footer />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nexport function useGetLocation(props) {\n  const [location, setLocation] = useState({\n    loading: false,\n    data: null,\n    error: false,\n  });\n\n  function getCoordinates(position) {\n    setLocation({\n      loading: false,\n      data: position.coords,\n      error: false,\n    });\n  }\n\n  function showError(error) {\n    setLocation({\n      loading: false,\n      data: {\n        accuracy: 2678,\n        altitude: null,\n        altitudeAccuracy: null,\n        heading: null,\n        latitude: 1.3271039999999998,\n        longitude: 103.841792,\n        speed: null,\n      },\n      error: false,\n    });\n\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        alert(\n          \"User denied the request for Geolocation.\\n\" +\n            \"We are assuming you are in the center of Singapore\"\n        );\n        break;\n      case error.POSITION_UNAVAILABLE:\n        alert(\n          \"Location information is unavailable.\\n\" +\n            \"We are assuming you are in the center of Singapore\"\n        );\n        break;\n      case error.TIMEOUT:\n        alert(\n          \"The request to get user location timed out.\\n\" +\n            \"We are assuming you are in the center of Singapore\"\n        );\n        break;\n      case error.UNKNOWN_ERR:\n        alert(\n          \"An unknown error occurred.\\n\" +\n            \"We are assuming you are in the center of Singapore\"\n        );\n        break;\n    }\n  }\n\n  useEffect(() => {\n    console.log(\"Requesting location\");\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(getCoordinates, showError);\n    } else {\n      alert(\"Geolocation is not supported by this browser\");\n    }\n  }, [props]);\n  return location;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}